name: claude-code-workflow
version: 1.0.0
description: AI orchestrator that controls Claude Code to automate development workflows

llm:
  model: claude-sonnet-4-5-20250929
  temperature: 0.7
  max_tokens: 4000

tools:
  # ===== Claude Code Direct Invocation =====

  # Execute a task with Claude Code
  - name: claude_task
    description: |
      Execute a task with Claude Code in headless mode.

      Returns structured JSON with:
      - session_id: Session ID for future resume operations
      - result: Claude Code's response/output
      - num_turns: Number of conversation turns
      - total_cost_usd: API cost for this execution

      Use this for:
      - Initial task execution
      - One-off requests
      - Starting a new conversation

      After execution, save the session_id if you need to continue the conversation later.
    command: [bash, -c]
    parameters:
      - name: cmd_with_task
        type: string
        description: |
          Complete bash command string. Format:
          claude -p "your task description here" --output-format json --dangerously-skip-permissions

          Example: claude -p "Create a simple HTTP server in Node.js" --output-format json
            --permission-mode default|plan|acceptEdits|bypassPermissions
        inject_as: argument

  # Resume an existing Claude Code session
  - name: claude_resume
    description: |
      Resume an existing Claude Code session with additional prompt.

      Maintains conversation context from previous interactions.
      Useful for:
      - Providing feedback on previous output
      - Requesting modifications
      - Adding clarifications
      - Iterative refinement

      Returns same JSON structure as claude_task with updated result.
    command: [bash, -c]
    parameters:
      - name: cmd_with_resume
        type: string
        description: |
          Complete bash command string. Format:
          claude --resume "session-id-here" -p "follow-up prompt" --output-format json --dangerously-skip-permissions

          Example: claude --resume "abc-123" -p "add error handling" --output-format json  --no-interactive
        inject_as: argument

  # Get execution plan without making changes
  - name: claude_plan
    description: |
      Ask Claude Code to create an execution plan without actually making changes.

      Use this when you want to:
      - Preview what Claude Code will do
      - Analyze approach before execution
      - Validate understanding of task

      Returns plan description in result field.
      Note: No files are modified in plan mode.
    command: [bash, -c]
    parameters:
      - name: cmd_with_plan
        type: string
        description: |
          Complete bash command string. Format:
          claude -p "task description" --permission-mode plan --output-format json

          Example: claude -p "refactor user service" --permission-mode plan --output-format json
        inject_as: argument

  # ===== Experience Recording & Learning =====

  # Read historical experience
  - name: read_lab_history
    description: |
      Read recent entries from the experience log to learn from past sessions.

      Use this to:
      - Check what tasks have been attempted before
      - Learn from successful execution patterns
      - Avoid repeating failed approaches
      - Understand cost patterns (total_cost_usd trends)

      Look for patterns like:
      - Which types of tasks succeeded/failed
      - How many resume iterations were needed
      - Whether plan mode helped before execution
      - Session IDs of successful tasks (for reference)

      If no history exists, file won't exist and you'll get empty output.
    command: [sh, -c, 'if [ -f .claude-code-lab/sessions.jsonl ]; then tail -30 .claude-code-lab/sessions.jsonl; fi']
    parameters: []

  # Record interaction to experience log
  - name: record_interaction
    description: |
      Record a task execution to the experience log.

      Action types:
      - "execute" - Executed a task (record session_id, num_turns, cost, outcome)
      - "resume" - Resumed a session (record what was improved)
      - "plan" - Generated a plan (record insights)
      - "verify" - Verification result (files created, tests passed)
      - "complete" - Task finished successfully
      - "failed" - Task failed (record error details)

      Example records:
      - {"timestamp":"2025-10-02T10:00:00Z","action":"execute","session_id":"abc-123","task":"Create HTTP server","num_turns":4,"cost_usd":0.024,"result":"success"}
      - {"timestamp":"2025-10-02T10:05:00Z","action":"resume","session_id":"abc-123","prompt":"add error handling","result":"success"}
      - {"timestamp":"2025-10-02T10:10:00Z","action":"complete","details":"Files created: server.js, tests passed"}
    command: [sh, -c, 'echo "$1" >> .claude-code-lab/sessions.jsonl', --]
    parameters:
      - name: log_entry
        type: string
        description: |
          JSON string (single line) containing:
          - timestamp: ISO 8601 timestamp
          - action: Action type
          - session_id: Claude Code session ID (for execute/resume)
          - task/prompt: What was requested
          - num_turns: Number of turns (optional)
          - cost_usd: Execution cost (optional)
          - result: "success" / "failed"
          - details: Additional information

          Example: {"timestamp":"2025-10-02T10:00:00Z","action":"execute","session_id":"abc-123","task":"Create server","num_turns":4,"cost_usd":0.024,"result":"success"}
        inject_as: argument

  # ===== Verification Tools =====

  # Run tests to verify changes
  - name: run_tests
    description: |
      Run npm tests to verify changes made by Claude Code.
      Use this after Claude Code completes a task.
    command: [npm, test]
    parameters: []

  # Check if file exists
  - name: file_exists
    description: Check if a file exists at the given path
    command: [test, -f]
    parameters:
      - name: file_path
        type: string
        description: Path to check
        inject_as: argument

  # Read file contents
  - name: read_file
    description: Read contents of a file
    command: [cat]
    parameters:
      - name: file_path
        type: string
        description: Path to file
        inject_as: argument

  # List files in directory
  - name: list_files
    description: List files in a directory
    command: [ls, -la]
    parameters:
      - name: directory
        type: string
        description: Directory path (optional, defaults to current directory)
        inject_as: argument

  # ===== Lab Setup =====

  # Initialize experience lab directory
  - name: init_lab
    description: |
      Initialize the .claude-code-lab/ directory for experience tracking.
      Creates directory and README if they don't exist.
    command: [mkdir, -p, .claude-code-lab]
    parameters: []

  # Create lab README
  - name: create_lab_readme
    description: Create README in .claude-code-lab/ explaining the purpose
    command: [sh, -c]
    parameters:
      - name: content
        type: string
        description: README content to write
        inject_as: argument
