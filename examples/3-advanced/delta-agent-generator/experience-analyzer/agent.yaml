# Experience Analyzer Sub-Agent
# Intelligent semantic analysis of delta-agent-generator history
# Part of delta-agent-generator v3.0 - demonstrates Delta's agent composition capability

name: experience-analyzer
version: 1.0.0
description: |
  Intelligent experience analysis agent for delta-agent-generator.

  Provides semantic insights from generation history, not just statistics.
  Understands patterns, explains causes, and recommends improvements.

  This is a SUB-AGENT - called by delta-agent-generator to analyze its own history.

# LLM Configuration
llm:
  model: gpt-5-mini  # Same model as parent for consistency
  temperature: 0.3                    # Low temperature for analytical precision
  max_tokens: 3000                    # Enough for detailed analysis

# Tools - Focus on reading history and providing insights
tools:
  # ===== Data Reading (3 tools - v1.7 Simplified Syntax) =====

  - name: read_sessions
    description: |
      Read the complete sessions.jsonl file containing generation history.

      Each line is a JSON entry with fields:
      - timestamp: ISO 8601 timestamp
      - action: execute, complete, failed, resume, plan
      - session_id: Claude Code session identifier
      - task: Task description (for execute actions)
      - agent_type: Category (file-tools, api-tools, database-tools, etc.)
      - cost_usd: API cost in USD
      - num_turns: Conversation turns
      - result: success or failed
      - details: Additional context

      Returns: Raw JSONL content (one JSON per line).
    exec: "cat .claude-lab/sessions.jsonl"  # v1.7: Parameterless tool

  - name: read_recent_failures
    description: |
      Extract recent failed sessions for failure analysis.

      Useful when user asks: "Why did the last generation fail?"

      Returns: Last 10 failed session entries (JSONL format).
    shell: 'grep "\"result\":\"failed\"" .claude-lab/sessions.jsonl | tail -10 || echo "No failures found"'  # v1.7: Pipeline with fallback

  - name: read_successes
    description: |
      Extract all successful sessions for pattern analysis.

      Useful for identifying success factors and best practices.

      Returns: All successful session entries (JSONL format).
    shell: 'grep "\"result\":\"success\"" .claude-lab/sessions.jsonl || echo "No successes found"'  # v1.7: Grep with fallback

  # ===== Statistical Analysis (1 tool) =====

  - name: get_statistics
    description: |
      Get basic statistical summary from a Python helper script.

      Provides numerical foundation for semantic analysis:
      - Count of executions, completions, failures
      - Average/median/min/max costs
      - Cost distribution by category (simple/medium/complex)
      - Success rates by agent type
      - Resume iteration statistics

      Use this FIRST to get numerical baseline, then add semantic insights.

      Returns: JSON with statistical summary.
    command: [python3, "${AGENT_HOME}/tools/basic_stats.py", .claude-lab/sessions.jsonl]
    parameters: []

  # ===== Output (1 tool - v1.7 Simplified Syntax) =====

  - name: output_analysis
    description: |
      Output the final analysis as structured JSON.

      Required JSON structure:
      {
        "summary": "Brief overview (2-3 sentences)",
        "insights": [
          {
            "type": "pattern|cost_driver|success_factor|failure_cause",
            "finding": "Specific observation with evidence",
            "evidence": "Supporting data from sessions.jsonl",
            "confidence": "high|medium|low"
          }
        ],
        "cost_prediction": {
          "for_request": "What the prediction is for",
          "predicted_range": "$X.XX-$X.XX",
          "expected": "$X.XX",
          "confidence": "high|medium|low",
          "reasoning": "Explanation of how prediction was derived"
        },
        "recommendations": [
          "Specific, actionable advice (not generic tips)"
        ],
        "success_factors": [
          "Patterns that lead to successful generations"
        ],
        "failure_patterns": [
          "Common issues that cause failures"
        ]
      }

      IMPORTANT: Always include evidence and reasoning. Be specific, not generic.
    exec: "echo ${json_output}"  # v1.7: Simple echo with parameter

# No hooks needed - this is a focused analysis agent
